/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class FetchMessageStatusResp : TBase
{
  private Dictionary<long, int> _MessageIds;
  private Dictionary<long, int> _UserRelationRequestIds;

  public Dictionary<long, int> MessageIds
  {
    get
    {
      return _MessageIds;
    }
    set
    {
      __isset.MessageIds = true;
      this._MessageIds = value;
    }
  }

  public Dictionary<long, int> UserRelationRequestIds
  {
    get
    {
      return _UserRelationRequestIds;
    }
    set
    {
      __isset.UserRelationRequestIds = true;
      this._UserRelationRequestIds = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool MessageIds;
    public bool UserRelationRequestIds;
  }

  public FetchMessageStatusResp() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Map) {
              {
                MessageIds = new Dictionary<long, int>();
                TMap _map18 = iprot.ReadMapBegin();
                for( int _i19 = 0; _i19 < _map18.Count; ++_i19)
                {
                  long _key20;
                  int _val21;
                  _key20 = iprot.ReadI64();
                  _val21 = iprot.ReadI32();
                  MessageIds[_key20] = _val21;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Map) {
              {
                UserRelationRequestIds = new Dictionary<long, int>();
                TMap _map22 = iprot.ReadMapBegin();
                for( int _i23 = 0; _i23 < _map22.Count; ++_i23)
                {
                  long _key24;
                  int _val25;
                  _key24 = iprot.ReadI64();
                  _val25 = iprot.ReadI32();
                  UserRelationRequestIds[_key24] = _val25;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("FetchMessageStatusResp");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (MessageIds != null && __isset.MessageIds) {
        field.Name = "MessageIds";
        field.Type = TType.Map;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.I64, TType.I32, MessageIds.Count));
          foreach (long _iter26 in MessageIds.Keys)
          {
            oprot.WriteI64(_iter26);
            oprot.WriteI32(MessageIds[_iter26]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (UserRelationRequestIds != null && __isset.UserRelationRequestIds) {
        field.Name = "UserRelationRequestIds";
        field.Type = TType.Map;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.I64, TType.I32, UserRelationRequestIds.Count));
          foreach (long _iter27 in UserRelationRequestIds.Keys)
          {
            oprot.WriteI64(_iter27);
            oprot.WriteI32(UserRelationRequestIds[_iter27]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("FetchMessageStatusResp(");
    bool __first = true;
    if (MessageIds != null && __isset.MessageIds) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("MessageIds: ");
      __sb.Append(MessageIds);
    }
    if (UserRelationRequestIds != null && __isset.UserRelationRequestIds) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("UserRelationRequestIds: ");
      __sb.Append(UserRelationRequestIds);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

