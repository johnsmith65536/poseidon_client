/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class SyncMessageResp : TBase
{
  private List<Message> _Messages;
  private List<UserRelation> _UserRelations;
  private long _LastOnlineTime;

  public List<Message> Messages
  {
    get
    {
      return _Messages;
    }
    set
    {
      __isset.Messages = true;
      this._Messages = value;
    }
  }

  public List<UserRelation> UserRelations
  {
    get
    {
      return _UserRelations;
    }
    set
    {
      __isset.UserRelations = true;
      this._UserRelations = value;
    }
  }

  public long LastOnlineTime
  {
    get
    {
      return _LastOnlineTime;
    }
    set
    {
      __isset.LastOnlineTime = true;
      this._LastOnlineTime = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool Messages;
    public bool UserRelations;
    public bool LastOnlineTime;
  }

  public SyncMessageResp() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                Messages = new List<Message>();
                TList _list18 = iprot.ReadListBegin();
                for( int _i19 = 0; _i19 < _list18.Count; ++_i19)
                {
                  Message _elem20;
                  _elem20 = new Message();
                  _elem20.Read(iprot);
                  Messages.Add(_elem20);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                UserRelations = new List<UserRelation>();
                TList _list21 = iprot.ReadListBegin();
                for( int _i22 = 0; _i22 < _list21.Count; ++_i22)
                {
                  UserRelation _elem23;
                  _elem23 = new UserRelation();
                  _elem23.Read(iprot);
                  UserRelations.Add(_elem23);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              LastOnlineTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("SyncMessageResp");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Messages != null && __isset.Messages) {
        field.Name = "Messages";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Messages.Count));
          foreach (Message _iter24 in Messages)
          {
            _iter24.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (UserRelations != null && __isset.UserRelations) {
        field.Name = "UserRelations";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, UserRelations.Count));
          foreach (UserRelation _iter25 in UserRelations)
          {
            _iter25.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.LastOnlineTime) {
        field.Name = "LastOnlineTime";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(LastOnlineTime);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("SyncMessageResp(");
    bool __first = true;
    if (Messages != null && __isset.Messages) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Messages: ");
      __sb.Append(Messages);
    }
    if (UserRelations != null && __isset.UserRelations) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("UserRelations: ");
      __sb.Append(UserRelations);
    }
    if (__isset.LastOnlineTime) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("LastOnlineTime: ");
      __sb.Append(LastOnlineTime);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

