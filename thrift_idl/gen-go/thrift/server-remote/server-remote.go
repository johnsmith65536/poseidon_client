// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	"github.com/apache/thrift/lib/go/thrift"
	"thrift"
)

var _ = thrift.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  CreateUserResp CreateUser(CreateUserReq req)")
  fmt.Fprintln(os.Stderr, "  LoginResp Login(LoginReq req)")
  fmt.Fprintln(os.Stderr, "  LogoutResp Logout(LogoutReq req)")
  fmt.Fprintln(os.Stderr, "  SendMessageResp SendMessage(SendMessageReq req)")
  fmt.Fprintln(os.Stderr, "  HeartBeatResp HeartBeat(HeartBeatReq req)")
  fmt.Fprintln(os.Stderr, "  FetchFriendsListResp FetchFriendsList(FetchFriendsListReq req)")
  fmt.Fprintln(os.Stderr, "  SyncMessageResp SyncMessage(SyncMessageReq req)")
  fmt.Fprintln(os.Stderr, "  AddFriendResp AddFriend(AddFriendReq req)")
  fmt.Fprintln(os.Stderr, "  ReplyAddFriendResp ReplyAddFriend(ReplyAddFriendReq req)")
  fmt.Fprintln(os.Stderr, "  UpdateMessageStatusResp UpdateMessageStatus(UpdateMessageStatusReq req)")
  fmt.Fprintln(os.Stderr, "  SearchUserResp SearchUser(SearchUserReq req)")
  fmt.Fprintln(os.Stderr, "  DeleteFriendResp DeleteFriend(DeleteFriendReq req)")
  fmt.Fprintln(os.Stderr, "  GetSTSInfoResp GetSTSInfo(GetSTSInfoReq req)")
  fmt.Fprintln(os.Stderr, "  FetchMessageStatusResp FetchMessageStatus(FetchMessageStatusReq req)")
  fmt.Fprintln(os.Stderr, "  CreateObjectResp CreateObject(CreateObjectReq req)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := thrift.NewServerClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "CreateUser":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateUser requires 1 args")
      flag.Usage()
    }
    arg48 := flag.Arg(1)
    mbTrans49 := thrift.NewTMemoryBufferLen(len(arg48))
    defer mbTrans49.Close()
    _, err50 := mbTrans49.WriteString(arg48)
    if err50 != nil {
      Usage()
      return
    }
    factory51 := thrift.NewTJSONProtocolFactory()
    jsProt52 := factory51.GetProtocol(mbTrans49)
    argvalue0 := thrift.NewCreateUserReq()
    err53 := argvalue0.Read(jsProt52)
    if err53 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateUser(context.Background(), value0))
    fmt.Print("\n")
    break
  case "Login":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Login requires 1 args")
      flag.Usage()
    }
    arg54 := flag.Arg(1)
    mbTrans55 := thrift.NewTMemoryBufferLen(len(arg54))
    defer mbTrans55.Close()
    _, err56 := mbTrans55.WriteString(arg54)
    if err56 != nil {
      Usage()
      return
    }
    factory57 := thrift.NewTJSONProtocolFactory()
    jsProt58 := factory57.GetProtocol(mbTrans55)
    argvalue0 := thrift.NewLoginReq()
    err59 := argvalue0.Read(jsProt58)
    if err59 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Login(context.Background(), value0))
    fmt.Print("\n")
    break
  case "Logout":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Logout requires 1 args")
      flag.Usage()
    }
    arg60 := flag.Arg(1)
    mbTrans61 := thrift.NewTMemoryBufferLen(len(arg60))
    defer mbTrans61.Close()
    _, err62 := mbTrans61.WriteString(arg60)
    if err62 != nil {
      Usage()
      return
    }
    factory63 := thrift.NewTJSONProtocolFactory()
    jsProt64 := factory63.GetProtocol(mbTrans61)
    argvalue0 := thrift.NewLogoutReq()
    err65 := argvalue0.Read(jsProt64)
    if err65 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Logout(context.Background(), value0))
    fmt.Print("\n")
    break
  case "SendMessage":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SendMessage requires 1 args")
      flag.Usage()
    }
    arg66 := flag.Arg(1)
    mbTrans67 := thrift.NewTMemoryBufferLen(len(arg66))
    defer mbTrans67.Close()
    _, err68 := mbTrans67.WriteString(arg66)
    if err68 != nil {
      Usage()
      return
    }
    factory69 := thrift.NewTJSONProtocolFactory()
    jsProt70 := factory69.GetProtocol(mbTrans67)
    argvalue0 := thrift.NewSendMessageReq()
    err71 := argvalue0.Read(jsProt70)
    if err71 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.SendMessage(context.Background(), value0))
    fmt.Print("\n")
    break
  case "HeartBeat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "HeartBeat requires 1 args")
      flag.Usage()
    }
    arg72 := flag.Arg(1)
    mbTrans73 := thrift.NewTMemoryBufferLen(len(arg72))
    defer mbTrans73.Close()
    _, err74 := mbTrans73.WriteString(arg72)
    if err74 != nil {
      Usage()
      return
    }
    factory75 := thrift.NewTJSONProtocolFactory()
    jsProt76 := factory75.GetProtocol(mbTrans73)
    argvalue0 := thrift.NewHeartBeatReq()
    err77 := argvalue0.Read(jsProt76)
    if err77 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.HeartBeat(context.Background(), value0))
    fmt.Print("\n")
    break
  case "FetchFriendsList":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FetchFriendsList requires 1 args")
      flag.Usage()
    }
    arg78 := flag.Arg(1)
    mbTrans79 := thrift.NewTMemoryBufferLen(len(arg78))
    defer mbTrans79.Close()
    _, err80 := mbTrans79.WriteString(arg78)
    if err80 != nil {
      Usage()
      return
    }
    factory81 := thrift.NewTJSONProtocolFactory()
    jsProt82 := factory81.GetProtocol(mbTrans79)
    argvalue0 := thrift.NewFetchFriendsListReq()
    err83 := argvalue0.Read(jsProt82)
    if err83 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.FetchFriendsList(context.Background(), value0))
    fmt.Print("\n")
    break
  case "SyncMessage":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SyncMessage requires 1 args")
      flag.Usage()
    }
    arg84 := flag.Arg(1)
    mbTrans85 := thrift.NewTMemoryBufferLen(len(arg84))
    defer mbTrans85.Close()
    _, err86 := mbTrans85.WriteString(arg84)
    if err86 != nil {
      Usage()
      return
    }
    factory87 := thrift.NewTJSONProtocolFactory()
    jsProt88 := factory87.GetProtocol(mbTrans85)
    argvalue0 := thrift.NewSyncMessageReq()
    err89 := argvalue0.Read(jsProt88)
    if err89 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.SyncMessage(context.Background(), value0))
    fmt.Print("\n")
    break
  case "AddFriend":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddFriend requires 1 args")
      flag.Usage()
    }
    arg90 := flag.Arg(1)
    mbTrans91 := thrift.NewTMemoryBufferLen(len(arg90))
    defer mbTrans91.Close()
    _, err92 := mbTrans91.WriteString(arg90)
    if err92 != nil {
      Usage()
      return
    }
    factory93 := thrift.NewTJSONProtocolFactory()
    jsProt94 := factory93.GetProtocol(mbTrans91)
    argvalue0 := thrift.NewAddFriendReq()
    err95 := argvalue0.Read(jsProt94)
    if err95 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddFriend(context.Background(), value0))
    fmt.Print("\n")
    break
  case "ReplyAddFriend":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ReplyAddFriend requires 1 args")
      flag.Usage()
    }
    arg96 := flag.Arg(1)
    mbTrans97 := thrift.NewTMemoryBufferLen(len(arg96))
    defer mbTrans97.Close()
    _, err98 := mbTrans97.WriteString(arg96)
    if err98 != nil {
      Usage()
      return
    }
    factory99 := thrift.NewTJSONProtocolFactory()
    jsProt100 := factory99.GetProtocol(mbTrans97)
    argvalue0 := thrift.NewReplyAddFriendReq()
    err101 := argvalue0.Read(jsProt100)
    if err101 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ReplyAddFriend(context.Background(), value0))
    fmt.Print("\n")
    break
  case "UpdateMessageStatus":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UpdateMessageStatus requires 1 args")
      flag.Usage()
    }
    arg102 := flag.Arg(1)
    mbTrans103 := thrift.NewTMemoryBufferLen(len(arg102))
    defer mbTrans103.Close()
    _, err104 := mbTrans103.WriteString(arg102)
    if err104 != nil {
      Usage()
      return
    }
    factory105 := thrift.NewTJSONProtocolFactory()
    jsProt106 := factory105.GetProtocol(mbTrans103)
    argvalue0 := thrift.NewUpdateMessageStatusReq()
    err107 := argvalue0.Read(jsProt106)
    if err107 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.UpdateMessageStatus(context.Background(), value0))
    fmt.Print("\n")
    break
  case "SearchUser":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SearchUser requires 1 args")
      flag.Usage()
    }
    arg108 := flag.Arg(1)
    mbTrans109 := thrift.NewTMemoryBufferLen(len(arg108))
    defer mbTrans109.Close()
    _, err110 := mbTrans109.WriteString(arg108)
    if err110 != nil {
      Usage()
      return
    }
    factory111 := thrift.NewTJSONProtocolFactory()
    jsProt112 := factory111.GetProtocol(mbTrans109)
    argvalue0 := thrift.NewSearchUserReq()
    err113 := argvalue0.Read(jsProt112)
    if err113 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.SearchUser(context.Background(), value0))
    fmt.Print("\n")
    break
  case "DeleteFriend":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DeleteFriend requires 1 args")
      flag.Usage()
    }
    arg114 := flag.Arg(1)
    mbTrans115 := thrift.NewTMemoryBufferLen(len(arg114))
    defer mbTrans115.Close()
    _, err116 := mbTrans115.WriteString(arg114)
    if err116 != nil {
      Usage()
      return
    }
    factory117 := thrift.NewTJSONProtocolFactory()
    jsProt118 := factory117.GetProtocol(mbTrans115)
    argvalue0 := thrift.NewDeleteFriendReq()
    err119 := argvalue0.Read(jsProt118)
    if err119 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DeleteFriend(context.Background(), value0))
    fmt.Print("\n")
    break
  case "GetSTSInfo":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetSTSInfo requires 1 args")
      flag.Usage()
    }
    arg120 := flag.Arg(1)
    mbTrans121 := thrift.NewTMemoryBufferLen(len(arg120))
    defer mbTrans121.Close()
    _, err122 := mbTrans121.WriteString(arg120)
    if err122 != nil {
      Usage()
      return
    }
    factory123 := thrift.NewTJSONProtocolFactory()
    jsProt124 := factory123.GetProtocol(mbTrans121)
    argvalue0 := thrift.NewGetSTSInfoReq()
    err125 := argvalue0.Read(jsProt124)
    if err125 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetSTSInfo(context.Background(), value0))
    fmt.Print("\n")
    break
  case "FetchMessageStatus":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FetchMessageStatus requires 1 args")
      flag.Usage()
    }
    arg126 := flag.Arg(1)
    mbTrans127 := thrift.NewTMemoryBufferLen(len(arg126))
    defer mbTrans127.Close()
    _, err128 := mbTrans127.WriteString(arg126)
    if err128 != nil {
      Usage()
      return
    }
    factory129 := thrift.NewTJSONProtocolFactory()
    jsProt130 := factory129.GetProtocol(mbTrans127)
    argvalue0 := thrift.NewFetchMessageStatusReq()
    err131 := argvalue0.Read(jsProt130)
    if err131 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.FetchMessageStatus(context.Background(), value0))
    fmt.Print("\n")
    break
  case "CreateObject":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateObject requires 1 args")
      flag.Usage()
    }
    arg132 := flag.Arg(1)
    mbTrans133 := thrift.NewTMemoryBufferLen(len(arg132))
    defer mbTrans133.Close()
    _, err134 := mbTrans133.WriteString(arg132)
    if err134 != nil {
      Usage()
      return
    }
    factory135 := thrift.NewTJSONProtocolFactory()
    jsProt136 := factory135.GetProtocol(mbTrans133)
    argvalue0 := thrift.NewCreateObjectReq()
    err137 := argvalue0.Read(jsProt136)
    if err137 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateObject(context.Background(), value0))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
