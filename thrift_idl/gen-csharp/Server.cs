/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class Server {
  public interface ISync {
    CreateUserResp CreateUser(CreateUserReq req);
    LoginResp Login(LoginReq req);
    LogoutResp Logout(LogoutReq req);
    SendMessageResp SendMessage(SendMessageReq req);
    HeartBeatResp HeartBeat(HeartBeatReq req);
    FetchFriendsListResp FetchFriendsList(FetchFriendsListReq req);
    SyncMessageResp SyncMessage(SyncMessageReq req);
    UploadObjectResp UploadObject(UploadObjectReq req);
    AddFriendResp AddFriend(AddFriendReq req);
    ReplyAddFriendResp ReplyAddFriend(ReplyAddFriendReq req);
    UpdateMessageStatusResp UpdateMessageStatus(UpdateMessageStatusReq req);
    SearchUserResp SearchUser(SearchUserReq req);
  }

  public interface Iface : ISync {
    #if SILVERLIGHT
    IAsyncResult Begin_CreateUser(AsyncCallback callback, object state, CreateUserReq req);
    CreateUserResp End_CreateUser(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_Login(AsyncCallback callback, object state, LoginReq req);
    LoginResp End_Login(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_Logout(AsyncCallback callback, object state, LogoutReq req);
    LogoutResp End_Logout(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_SendMessage(AsyncCallback callback, object state, SendMessageReq req);
    SendMessageResp End_SendMessage(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_HeartBeat(AsyncCallback callback, object state, HeartBeatReq req);
    HeartBeatResp End_HeartBeat(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_FetchFriendsList(AsyncCallback callback, object state, FetchFriendsListReq req);
    FetchFriendsListResp End_FetchFriendsList(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_SyncMessage(AsyncCallback callback, object state, SyncMessageReq req);
    SyncMessageResp End_SyncMessage(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_UploadObject(AsyncCallback callback, object state, UploadObjectReq req);
    UploadObjectResp End_UploadObject(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_AddFriend(AsyncCallback callback, object state, AddFriendReq req);
    AddFriendResp End_AddFriend(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_ReplyAddFriend(AsyncCallback callback, object state, ReplyAddFriendReq req);
    ReplyAddFriendResp End_ReplyAddFriend(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_UpdateMessageStatus(AsyncCallback callback, object state, UpdateMessageStatusReq req);
    UpdateMessageStatusResp End_UpdateMessageStatus(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_SearchUser(AsyncCallback callback, object state, SearchUserReq req);
    SearchUserResp End_SearchUser(IAsyncResult asyncResult);
    #endif
  }

  public class Client : IDisposable, Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;
    protected int seqid_;

    public TProtocol InputProtocol
    {
      get { return iprot_; }
    }
    public TProtocol OutputProtocol
    {
      get { return oprot_; }
    }


    #region " IDisposable Support "
    private bool _IsDisposed;

    // IDisposable
    public void Dispose()
    {
      Dispose(true);
    }
    

    protected virtual void Dispose(bool disposing)
    {
      if (!_IsDisposed)
      {
        if (disposing)
        {
          if (iprot_ != null)
          {
            ((IDisposable)iprot_).Dispose();
          }
          if (oprot_ != null)
          {
            ((IDisposable)oprot_).Dispose();
          }
        }
      }
      _IsDisposed = true;
    }
    #endregion


    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_CreateUser(AsyncCallback callback, object state, CreateUserReq req)
    {
      return send_CreateUser(callback, state, req);
    }

    public CreateUserResp End_CreateUser(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_CreateUser();
    }

    #endif

    public CreateUserResp CreateUser(CreateUserReq req)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_CreateUser(null, null, req);
      return End_CreateUser(asyncResult);

      #else
      send_CreateUser(req);
      return recv_CreateUser();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_CreateUser(AsyncCallback callback, object state, CreateUserReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("CreateUser", TMessageType.Call, seqid_));
      CreateUser_args args = new CreateUser_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_CreateUser(CreateUserReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("CreateUser", TMessageType.Call, seqid_));
      CreateUser_args args = new CreateUser_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public CreateUserResp recv_CreateUser()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      CreateUser_result result = new CreateUser_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CreateUser failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_Login(AsyncCallback callback, object state, LoginReq req)
    {
      return send_Login(callback, state, req);
    }

    public LoginResp End_Login(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_Login();
    }

    #endif

    public LoginResp Login(LoginReq req)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_Login(null, null, req);
      return End_Login(asyncResult);

      #else
      send_Login(req);
      return recv_Login();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_Login(AsyncCallback callback, object state, LoginReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("Login", TMessageType.Call, seqid_));
      Login_args args = new Login_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_Login(LoginReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("Login", TMessageType.Call, seqid_));
      Login_args args = new Login_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public LoginResp recv_Login()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      Login_result result = new Login_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Login failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_Logout(AsyncCallback callback, object state, LogoutReq req)
    {
      return send_Logout(callback, state, req);
    }

    public LogoutResp End_Logout(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_Logout();
    }

    #endif

    public LogoutResp Logout(LogoutReq req)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_Logout(null, null, req);
      return End_Logout(asyncResult);

      #else
      send_Logout(req);
      return recv_Logout();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_Logout(AsyncCallback callback, object state, LogoutReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("Logout", TMessageType.Call, seqid_));
      Logout_args args = new Logout_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_Logout(LogoutReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("Logout", TMessageType.Call, seqid_));
      Logout_args args = new Logout_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public LogoutResp recv_Logout()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      Logout_result result = new Logout_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Logout failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_SendMessage(AsyncCallback callback, object state, SendMessageReq req)
    {
      return send_SendMessage(callback, state, req);
    }

    public SendMessageResp End_SendMessage(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_SendMessage();
    }

    #endif

    public SendMessageResp SendMessage(SendMessageReq req)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_SendMessage(null, null, req);
      return End_SendMessage(asyncResult);

      #else
      send_SendMessage(req);
      return recv_SendMessage();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_SendMessage(AsyncCallback callback, object state, SendMessageReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("SendMessage", TMessageType.Call, seqid_));
      SendMessage_args args = new SendMessage_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_SendMessage(SendMessageReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("SendMessage", TMessageType.Call, seqid_));
      SendMessage_args args = new SendMessage_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public SendMessageResp recv_SendMessage()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      SendMessage_result result = new SendMessage_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SendMessage failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_HeartBeat(AsyncCallback callback, object state, HeartBeatReq req)
    {
      return send_HeartBeat(callback, state, req);
    }

    public HeartBeatResp End_HeartBeat(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_HeartBeat();
    }

    #endif

    public HeartBeatResp HeartBeat(HeartBeatReq req)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_HeartBeat(null, null, req);
      return End_HeartBeat(asyncResult);

      #else
      send_HeartBeat(req);
      return recv_HeartBeat();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_HeartBeat(AsyncCallback callback, object state, HeartBeatReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("HeartBeat", TMessageType.Call, seqid_));
      HeartBeat_args args = new HeartBeat_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_HeartBeat(HeartBeatReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("HeartBeat", TMessageType.Call, seqid_));
      HeartBeat_args args = new HeartBeat_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public HeartBeatResp recv_HeartBeat()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      HeartBeat_result result = new HeartBeat_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "HeartBeat failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_FetchFriendsList(AsyncCallback callback, object state, FetchFriendsListReq req)
    {
      return send_FetchFriendsList(callback, state, req);
    }

    public FetchFriendsListResp End_FetchFriendsList(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_FetchFriendsList();
    }

    #endif

    public FetchFriendsListResp FetchFriendsList(FetchFriendsListReq req)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_FetchFriendsList(null, null, req);
      return End_FetchFriendsList(asyncResult);

      #else
      send_FetchFriendsList(req);
      return recv_FetchFriendsList();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_FetchFriendsList(AsyncCallback callback, object state, FetchFriendsListReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("FetchFriendsList", TMessageType.Call, seqid_));
      FetchFriendsList_args args = new FetchFriendsList_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_FetchFriendsList(FetchFriendsListReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("FetchFriendsList", TMessageType.Call, seqid_));
      FetchFriendsList_args args = new FetchFriendsList_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public FetchFriendsListResp recv_FetchFriendsList()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      FetchFriendsList_result result = new FetchFriendsList_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "FetchFriendsList failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_SyncMessage(AsyncCallback callback, object state, SyncMessageReq req)
    {
      return send_SyncMessage(callback, state, req);
    }

    public SyncMessageResp End_SyncMessage(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_SyncMessage();
    }

    #endif

    public SyncMessageResp SyncMessage(SyncMessageReq req)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_SyncMessage(null, null, req);
      return End_SyncMessage(asyncResult);

      #else
      send_SyncMessage(req);
      return recv_SyncMessage();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_SyncMessage(AsyncCallback callback, object state, SyncMessageReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("SyncMessage", TMessageType.Call, seqid_));
      SyncMessage_args args = new SyncMessage_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_SyncMessage(SyncMessageReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("SyncMessage", TMessageType.Call, seqid_));
      SyncMessage_args args = new SyncMessage_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public SyncMessageResp recv_SyncMessage()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      SyncMessage_result result = new SyncMessage_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SyncMessage failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_UploadObject(AsyncCallback callback, object state, UploadObjectReq req)
    {
      return send_UploadObject(callback, state, req);
    }

    public UploadObjectResp End_UploadObject(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_UploadObject();
    }

    #endif

    public UploadObjectResp UploadObject(UploadObjectReq req)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_UploadObject(null, null, req);
      return End_UploadObject(asyncResult);

      #else
      send_UploadObject(req);
      return recv_UploadObject();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_UploadObject(AsyncCallback callback, object state, UploadObjectReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("UploadObject", TMessageType.Call, seqid_));
      UploadObject_args args = new UploadObject_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_UploadObject(UploadObjectReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("UploadObject", TMessageType.Call, seqid_));
      UploadObject_args args = new UploadObject_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public UploadObjectResp recv_UploadObject()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      UploadObject_result result = new UploadObject_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "UploadObject failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_AddFriend(AsyncCallback callback, object state, AddFriendReq req)
    {
      return send_AddFriend(callback, state, req);
    }

    public AddFriendResp End_AddFriend(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_AddFriend();
    }

    #endif

    public AddFriendResp AddFriend(AddFriendReq req)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_AddFriend(null, null, req);
      return End_AddFriend(asyncResult);

      #else
      send_AddFriend(req);
      return recv_AddFriend();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_AddFriend(AsyncCallback callback, object state, AddFriendReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("AddFriend", TMessageType.Call, seqid_));
      AddFriend_args args = new AddFriend_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_AddFriend(AddFriendReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("AddFriend", TMessageType.Call, seqid_));
      AddFriend_args args = new AddFriend_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public AddFriendResp recv_AddFriend()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      AddFriend_result result = new AddFriend_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddFriend failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_ReplyAddFriend(AsyncCallback callback, object state, ReplyAddFriendReq req)
    {
      return send_ReplyAddFriend(callback, state, req);
    }

    public ReplyAddFriendResp End_ReplyAddFriend(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_ReplyAddFriend();
    }

    #endif

    public ReplyAddFriendResp ReplyAddFriend(ReplyAddFriendReq req)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_ReplyAddFriend(null, null, req);
      return End_ReplyAddFriend(asyncResult);

      #else
      send_ReplyAddFriend(req);
      return recv_ReplyAddFriend();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_ReplyAddFriend(AsyncCallback callback, object state, ReplyAddFriendReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("ReplyAddFriend", TMessageType.Call, seqid_));
      ReplyAddFriend_args args = new ReplyAddFriend_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_ReplyAddFriend(ReplyAddFriendReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("ReplyAddFriend", TMessageType.Call, seqid_));
      ReplyAddFriend_args args = new ReplyAddFriend_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public ReplyAddFriendResp recv_ReplyAddFriend()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      ReplyAddFriend_result result = new ReplyAddFriend_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ReplyAddFriend failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_UpdateMessageStatus(AsyncCallback callback, object state, UpdateMessageStatusReq req)
    {
      return send_UpdateMessageStatus(callback, state, req);
    }

    public UpdateMessageStatusResp End_UpdateMessageStatus(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_UpdateMessageStatus();
    }

    #endif

    public UpdateMessageStatusResp UpdateMessageStatus(UpdateMessageStatusReq req)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_UpdateMessageStatus(null, null, req);
      return End_UpdateMessageStatus(asyncResult);

      #else
      send_UpdateMessageStatus(req);
      return recv_UpdateMessageStatus();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_UpdateMessageStatus(AsyncCallback callback, object state, UpdateMessageStatusReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("UpdateMessageStatus", TMessageType.Call, seqid_));
      UpdateMessageStatus_args args = new UpdateMessageStatus_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_UpdateMessageStatus(UpdateMessageStatusReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("UpdateMessageStatus", TMessageType.Call, seqid_));
      UpdateMessageStatus_args args = new UpdateMessageStatus_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public UpdateMessageStatusResp recv_UpdateMessageStatus()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      UpdateMessageStatus_result result = new UpdateMessageStatus_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "UpdateMessageStatus failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_SearchUser(AsyncCallback callback, object state, SearchUserReq req)
    {
      return send_SearchUser(callback, state, req);
    }

    public SearchUserResp End_SearchUser(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_SearchUser();
    }

    #endif

    public SearchUserResp SearchUser(SearchUserReq req)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_SearchUser(null, null, req);
      return End_SearchUser(asyncResult);

      #else
      send_SearchUser(req);
      return recv_SearchUser();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_SearchUser(AsyncCallback callback, object state, SearchUserReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("SearchUser", TMessageType.Call, seqid_));
      SearchUser_args args = new SearchUser_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_SearchUser(SearchUserReq req)
    {
      oprot_.WriteMessageBegin(new TMessage("SearchUser", TMessageType.Call, seqid_));
      SearchUser_args args = new SearchUser_args();
      args.Req = req;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public SearchUserResp recv_SearchUser()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      SearchUser_result result = new SearchUser_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SearchUser failed: unknown result");
    }

  }
  public class Processor : TProcessor {
    public Processor(ISync iface)
    {
      iface_ = iface;
      processMap_["CreateUser"] = CreateUser_Process;
      processMap_["Login"] = Login_Process;
      processMap_["Logout"] = Logout_Process;
      processMap_["SendMessage"] = SendMessage_Process;
      processMap_["HeartBeat"] = HeartBeat_Process;
      processMap_["FetchFriendsList"] = FetchFriendsList_Process;
      processMap_["SyncMessage"] = SyncMessage_Process;
      processMap_["UploadObject"] = UploadObject_Process;
      processMap_["AddFriend"] = AddFriend_Process;
      processMap_["ReplyAddFriend"] = ReplyAddFriend_Process;
      processMap_["UpdateMessageStatus"] = UpdateMessageStatus_Process;
      processMap_["SearchUser"] = SearchUser_Process;
    }

    protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
    private ISync iface_;
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public bool Process(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public void CreateUser_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      CreateUser_args args = new CreateUser_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      CreateUser_result result = new CreateUser_result();
      try
      {
        result.Success = iface_.CreateUser(args.Req);
        oprot.WriteMessageBegin(new TMessage("CreateUser", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("CreateUser", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void Login_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      Login_args args = new Login_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      Login_result result = new Login_result();
      try
      {
        result.Success = iface_.Login(args.Req);
        oprot.WriteMessageBegin(new TMessage("Login", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("Login", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void Logout_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      Logout_args args = new Logout_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      Logout_result result = new Logout_result();
      try
      {
        result.Success = iface_.Logout(args.Req);
        oprot.WriteMessageBegin(new TMessage("Logout", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("Logout", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void SendMessage_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      SendMessage_args args = new SendMessage_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      SendMessage_result result = new SendMessage_result();
      try
      {
        result.Success = iface_.SendMessage(args.Req);
        oprot.WriteMessageBegin(new TMessage("SendMessage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("SendMessage", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void HeartBeat_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      HeartBeat_args args = new HeartBeat_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      HeartBeat_result result = new HeartBeat_result();
      try
      {
        result.Success = iface_.HeartBeat(args.Req);
        oprot.WriteMessageBegin(new TMessage("HeartBeat", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("HeartBeat", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void FetchFriendsList_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      FetchFriendsList_args args = new FetchFriendsList_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      FetchFriendsList_result result = new FetchFriendsList_result();
      try
      {
        result.Success = iface_.FetchFriendsList(args.Req);
        oprot.WriteMessageBegin(new TMessage("FetchFriendsList", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("FetchFriendsList", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void SyncMessage_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      SyncMessage_args args = new SyncMessage_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      SyncMessage_result result = new SyncMessage_result();
      try
      {
        result.Success = iface_.SyncMessage(args.Req);
        oprot.WriteMessageBegin(new TMessage("SyncMessage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("SyncMessage", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void UploadObject_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      UploadObject_args args = new UploadObject_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      UploadObject_result result = new UploadObject_result();
      try
      {
        result.Success = iface_.UploadObject(args.Req);
        oprot.WriteMessageBegin(new TMessage("UploadObject", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("UploadObject", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void AddFriend_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      AddFriend_args args = new AddFriend_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      AddFriend_result result = new AddFriend_result();
      try
      {
        result.Success = iface_.AddFriend(args.Req);
        oprot.WriteMessageBegin(new TMessage("AddFriend", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("AddFriend", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void ReplyAddFriend_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      ReplyAddFriend_args args = new ReplyAddFriend_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      ReplyAddFriend_result result = new ReplyAddFriend_result();
      try
      {
        result.Success = iface_.ReplyAddFriend(args.Req);
        oprot.WriteMessageBegin(new TMessage("ReplyAddFriend", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("ReplyAddFriend", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void UpdateMessageStatus_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      UpdateMessageStatus_args args = new UpdateMessageStatus_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      UpdateMessageStatus_result result = new UpdateMessageStatus_result();
      try
      {
        result.Success = iface_.UpdateMessageStatus(args.Req);
        oprot.WriteMessageBegin(new TMessage("UpdateMessageStatus", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("UpdateMessageStatus", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void SearchUser_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      SearchUser_args args = new SearchUser_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      SearchUser_result result = new SearchUser_result();
      try
      {
        result.Success = iface_.SearchUser(args.Req);
        oprot.WriteMessageBegin(new TMessage("SearchUser", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("SearchUser", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CreateUser_args : TBase
  {
    private CreateUserReq _req;

    public CreateUserReq Req
    {
      get
      {
        return _req;
      }
      set
      {
        __isset.req = true;
        this._req = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool req;
    }

    public CreateUser_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Req = new CreateUserReq();
                Req.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("CreateUser_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("CreateUser_args(");
      bool __first = true;
      if (Req != null && __isset.req) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Req: ");
        __sb.Append(Req== null ? "<null>" : Req.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CreateUser_result : TBase
  {
    private CreateUserResp _success;

    public CreateUserResp Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public CreateUser_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new CreateUserResp();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("CreateUser_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("CreateUser_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Login_args : TBase
  {
    private LoginReq _req;

    public LoginReq Req
    {
      get
      {
        return _req;
      }
      set
      {
        __isset.req = true;
        this._req = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool req;
    }

    public Login_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Req = new LoginReq();
                Req.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("Login_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("Login_args(");
      bool __first = true;
      if (Req != null && __isset.req) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Req: ");
        __sb.Append(Req== null ? "<null>" : Req.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Login_result : TBase
  {
    private LoginResp _success;

    public LoginResp Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public Login_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new LoginResp();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("Login_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("Login_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Logout_args : TBase
  {
    private LogoutReq _req;

    public LogoutReq Req
    {
      get
      {
        return _req;
      }
      set
      {
        __isset.req = true;
        this._req = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool req;
    }

    public Logout_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Req = new LogoutReq();
                Req.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("Logout_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("Logout_args(");
      bool __first = true;
      if (Req != null && __isset.req) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Req: ");
        __sb.Append(Req== null ? "<null>" : Req.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Logout_result : TBase
  {
    private LogoutResp _success;

    public LogoutResp Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public Logout_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new LogoutResp();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("Logout_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("Logout_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SendMessage_args : TBase
  {
    private SendMessageReq _req;

    public SendMessageReq Req
    {
      get
      {
        return _req;
      }
      set
      {
        __isset.req = true;
        this._req = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool req;
    }

    public SendMessage_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Req = new SendMessageReq();
                Req.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("SendMessage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("SendMessage_args(");
      bool __first = true;
      if (Req != null && __isset.req) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Req: ");
        __sb.Append(Req== null ? "<null>" : Req.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SendMessage_result : TBase
  {
    private SendMessageResp _success;

    public SendMessageResp Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public SendMessage_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new SendMessageResp();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("SendMessage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("SendMessage_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class HeartBeat_args : TBase
  {
    private HeartBeatReq _req;

    public HeartBeatReq Req
    {
      get
      {
        return _req;
      }
      set
      {
        __isset.req = true;
        this._req = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool req;
    }

    public HeartBeat_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Req = new HeartBeatReq();
                Req.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("HeartBeat_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("HeartBeat_args(");
      bool __first = true;
      if (Req != null && __isset.req) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Req: ");
        __sb.Append(Req== null ? "<null>" : Req.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class HeartBeat_result : TBase
  {
    private HeartBeatResp _success;

    public HeartBeatResp Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public HeartBeat_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new HeartBeatResp();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("HeartBeat_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("HeartBeat_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class FetchFriendsList_args : TBase
  {
    private FetchFriendsListReq _req;

    public FetchFriendsListReq Req
    {
      get
      {
        return _req;
      }
      set
      {
        __isset.req = true;
        this._req = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool req;
    }

    public FetchFriendsList_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Req = new FetchFriendsListReq();
                Req.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("FetchFriendsList_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("FetchFriendsList_args(");
      bool __first = true;
      if (Req != null && __isset.req) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Req: ");
        __sb.Append(Req== null ? "<null>" : Req.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class FetchFriendsList_result : TBase
  {
    private FetchFriendsListResp _success;

    public FetchFriendsListResp Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public FetchFriendsList_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new FetchFriendsListResp();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("FetchFriendsList_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("FetchFriendsList_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SyncMessage_args : TBase
  {
    private SyncMessageReq _req;

    public SyncMessageReq Req
    {
      get
      {
        return _req;
      }
      set
      {
        __isset.req = true;
        this._req = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool req;
    }

    public SyncMessage_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Req = new SyncMessageReq();
                Req.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("SyncMessage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("SyncMessage_args(");
      bool __first = true;
      if (Req != null && __isset.req) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Req: ");
        __sb.Append(Req== null ? "<null>" : Req.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SyncMessage_result : TBase
  {
    private SyncMessageResp _success;

    public SyncMessageResp Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public SyncMessage_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new SyncMessageResp();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("SyncMessage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("SyncMessage_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class UploadObject_args : TBase
  {
    private UploadObjectReq _req;

    public UploadObjectReq Req
    {
      get
      {
        return _req;
      }
      set
      {
        __isset.req = true;
        this._req = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool req;
    }

    public UploadObject_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Req = new UploadObjectReq();
                Req.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("UploadObject_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("UploadObject_args(");
      bool __first = true;
      if (Req != null && __isset.req) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Req: ");
        __sb.Append(Req== null ? "<null>" : Req.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class UploadObject_result : TBase
  {
    private UploadObjectResp _success;

    public UploadObjectResp Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public UploadObject_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new UploadObjectResp();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("UploadObject_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("UploadObject_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class AddFriend_args : TBase
  {
    private AddFriendReq _req;

    public AddFriendReq Req
    {
      get
      {
        return _req;
      }
      set
      {
        __isset.req = true;
        this._req = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool req;
    }

    public AddFriend_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Req = new AddFriendReq();
                Req.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("AddFriend_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("AddFriend_args(");
      bool __first = true;
      if (Req != null && __isset.req) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Req: ");
        __sb.Append(Req== null ? "<null>" : Req.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class AddFriend_result : TBase
  {
    private AddFriendResp _success;

    public AddFriendResp Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public AddFriend_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new AddFriendResp();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("AddFriend_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("AddFriend_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ReplyAddFriend_args : TBase
  {
    private ReplyAddFriendReq _req;

    public ReplyAddFriendReq Req
    {
      get
      {
        return _req;
      }
      set
      {
        __isset.req = true;
        this._req = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool req;
    }

    public ReplyAddFriend_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Req = new ReplyAddFriendReq();
                Req.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ReplyAddFriend_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ReplyAddFriend_args(");
      bool __first = true;
      if (Req != null && __isset.req) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Req: ");
        __sb.Append(Req== null ? "<null>" : Req.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ReplyAddFriend_result : TBase
  {
    private ReplyAddFriendResp _success;

    public ReplyAddFriendResp Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public ReplyAddFriend_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ReplyAddFriendResp();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ReplyAddFriend_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ReplyAddFriend_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class UpdateMessageStatus_args : TBase
  {
    private UpdateMessageStatusReq _req;

    public UpdateMessageStatusReq Req
    {
      get
      {
        return _req;
      }
      set
      {
        __isset.req = true;
        this._req = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool req;
    }

    public UpdateMessageStatus_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Req = new UpdateMessageStatusReq();
                Req.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("UpdateMessageStatus_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("UpdateMessageStatus_args(");
      bool __first = true;
      if (Req != null && __isset.req) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Req: ");
        __sb.Append(Req== null ? "<null>" : Req.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class UpdateMessageStatus_result : TBase
  {
    private UpdateMessageStatusResp _success;

    public UpdateMessageStatusResp Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public UpdateMessageStatus_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new UpdateMessageStatusResp();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("UpdateMessageStatus_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("UpdateMessageStatus_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SearchUser_args : TBase
  {
    private SearchUserReq _req;

    public SearchUserReq Req
    {
      get
      {
        return _req;
      }
      set
      {
        __isset.req = true;
        this._req = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool req;
    }

    public SearchUser_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Req = new SearchUserReq();
                Req.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("SearchUser_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("SearchUser_args(");
      bool __first = true;
      if (Req != null && __isset.req) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Req: ");
        __sb.Append(Req== null ? "<null>" : Req.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SearchUser_result : TBase
  {
    private SearchUserResp _success;

    public SearchUserResp Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public SearchUser_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new SearchUserResp();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("SearchUser_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("SearchUser_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
